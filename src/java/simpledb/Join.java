package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    private JoinPredicate p;
    private DbIterator child1;
    private DbIterator child2;
    //Tuple from last iteration
    private Tuple prevCh1Tuple = null;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
        this.p = p;
        this.child1 = child1;
        this.child2 = child2;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        //return null;
        return p;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        //return null;
        return child1.getTupleDesc().getFieldName(getJoinPredicate().getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        //return null;
        return child2.getTupleDesc().getFieldName(getJoinPredicate().getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        //return null;
        return TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        child1.open();
        child2.open();
        super.open();
    }

    public void close() {
        // some code goes here
        child1.close();
        child2.close();
        super.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        child1.rewind();
        child2.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        //return null;
        //loop through child 1 tuples
        while (child1.hasNext() || prevCh1Tuple != null) {
                if (prevCh1Tuple != null) {
                        //loop through child 2 tuples
                        while (child2.hasNext()) {
                                Tuple child2Tuple = child2.next();
                                //if the predicate applies to the two tuples
                                if (p.filter(prevCh1Tuple, child2Tuple)) {
                                        //create a tuple that merges the two
                                        Tuple merged = new Tuple(getTupleDesc());
                                        int child1_numfields = prevCh1Tuple.getTupleDesc().numFields();
                                        int child2_numfields =  child2Tuple.getTupleDesc().numFields();
                                        //set the fields for the first child
                                        for (int i = 0; i < child1_numfields; i++) {
                                                merged.setField(i, prevCh1Tuple.getField(i));
                                        }
                                        //set the fields for the second child after
                                        for (int i = 0; i < child2_numfields; i++) {
                                                merged.setField(i+child1_numfields, child2Tuple.getField(i));
                                        }
                                        //return the merged tuple
                                        return merged;
                                }
                        }
                        //if run out of child2 tuples, rewind so we can check next child1 tuple
                        child2.rewind();
                }                
                //set child 1 to the next child
                if (child1.hasNext()) {
                       prevCh1Tuple = child1.next(); 
                } else {
                        break;
                }
        }        
        return null;
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
        //return null;
        return new DbIterator[] {child1, child2};
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
        child1 = children[0];
        child2 = children[1];
    }

}
